"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var array_util_1 = require("./array-util");
var KeyCodeUtil = /** @class */ (function () {
    function KeyCodeUtil() {
    }
    KeyCodeUtil.isSpecialKey = function (event) {
        // Check if: backspace ,delete, tab, escape, enter, . and ,
        if (array_util_1.ArrayUtil.inArray([this.BACKSPACE, this.DELETE, this.TAB, this.ESCAPE, this.ENTER, this.DECIMAL_POINT, this.DOT, this.COMMA], event.keyCode)
            // Check if: Ctrl/cmd+A
            || (event.keyCode === this.A && (event.ctrlKey === true || event.metaKey === true))
            // Check if: Ctrl/cmd+C
            || (event.keyCode === this.C && (event.ctrlKey === true || event.metaKey === true))
            // Check if: Ctrl/cmd+X
            || (event.keyCode === this.X && (event.ctrlKey === true || event.metaKey === true))
            // Check if: home, end, left, right
            || (event.keyCode >= this.BEGIN_HOME_END_LEFT_RIGHT && event.keyCode <= this.END_HOME_END_LEFT_RIGHT)) {
            return true;
        }
        return false;
    };
    KeyCodeUtil.isNumberKey = function (event) {
        // Check if: not a number
        if ((event.shiftKey || (event.keyCode < 48 || event.keyCode > 57)) && (event.keyCode < 96 || event.keyCode > 105)) {
            return false;
        }
        return true;
    };
    KeyCodeUtil.BACKSPACE = 8;
    KeyCodeUtil.A = 65;
    KeyCodeUtil.C = 67;
    KeyCodeUtil.X = 88;
    // begin keycode home,end,left,right
    KeyCodeUtil.BEGIN_HOME_END_LEFT_RIGHT = 35;
    // end keycode home,end,left,right
    KeyCodeUtil.END_HOME_END_LEFT_RIGHT = 39;
    KeyCodeUtil.DELETE = 46;
    KeyCodeUtil.TAB = 9;
    KeyCodeUtil.ESCAPE = 27;
    KeyCodeUtil.ENTER = 13;
    KeyCodeUtil.DOT = 190;
    KeyCodeUtil.COMMA = 188;
    KeyCodeUtil.DECIMAL_POINT = 110;
    return KeyCodeUtil;
}());
exports.KeyCodeUtil = KeyCodeUtil;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC91dGlsL2tleWNvZGUtdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJDQUF5QztBQUV6QztJQUFBO0lBMENBLENBQUM7SUF6QmlCLHdCQUFZLEdBQTFCLFVBQTJCLEtBQUs7UUFDNUIsMkRBQTJEO1FBQzNELElBQUksc0JBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDO1lBQzVJLHVCQUF1QjtlQUNwQixDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssSUFBSSxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUM7WUFDbkYsdUJBQXVCO2VBQ3BCLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQztZQUNuRix1QkFBdUI7ZUFDcEIsQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDO1lBQ25GLG1DQUFtQztlQUNoQyxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLHlCQUF5QixJQUFJLEtBQUssQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLHVCQUF1QixDQUFDLEVBQUU7WUFDdkcsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFYSx1QkFBVyxHQUF6QixVQUEwQixLQUFLO1FBQzNCLHlCQUF5QjtRQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxJQUFJLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxJQUFJLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDL0csT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBdENlLHFCQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsYUFBQyxHQUFHLEVBQUUsQ0FBQztJQUNQLGFBQUMsR0FBRyxFQUFFLENBQUM7SUFDUCxhQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLG9DQUFvQztJQUNwQixxQ0FBeUIsR0FBRyxFQUFFLENBQUM7SUFDL0Msa0NBQWtDO0lBQ2xCLG1DQUF1QixHQUFHLEVBQUUsQ0FBQztJQUM3QixrQkFBTSxHQUFHLEVBQUUsQ0FBQztJQUNaLGVBQUcsR0FBRyxDQUFDLENBQUM7SUFDUixrQkFBTSxHQUFHLEVBQUUsQ0FBQztJQUNaLGlCQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ1gsZUFBRyxHQUFHLEdBQUcsQ0FBQztJQUNWLGlCQUFLLEdBQUcsR0FBRyxDQUFDO0lBQ1oseUJBQWEsR0FBRyxHQUFHLENBQUM7SUEyQnhDLGtCQUFDO0NBMUNELEFBMENDLElBQUE7QUExQ1ksa0NBQVciLCJmaWxlIjoiYXBwL3V0aWwva2V5Y29kZS11dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgeyBBcnJheVV0aWwgfSBmcm9tICcuL2FycmF5LXV0aWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEtleUNvZGVVdGlsIHtcclxuICAgIHN0YXRpYyByZWFkb25seSBCQUNLU1BBQ0UgPSA4O1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IEEgPSA2NTtcclxuICAgIHN0YXRpYyByZWFkb25seSBDID0gNjc7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgWCA9IDg4O1xyXG4gICAgLy8gYmVnaW4ga2V5Y29kZSBob21lLGVuZCxsZWZ0LHJpZ2h0XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgQkVHSU5fSE9NRV9FTkRfTEVGVF9SSUdIVCA9IDM1O1xyXG4gICAgLy8gZW5kIGtleWNvZGUgaG9tZSxlbmQsbGVmdCxyaWdodFxyXG4gICAgc3RhdGljIHJlYWRvbmx5IEVORF9IT01FX0VORF9MRUZUX1JJR0hUID0gMzk7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgREVMRVRFID0gNDY7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgVEFCID0gOTtcclxuICAgIHN0YXRpYyByZWFkb25seSBFU0NBUEUgPSAyNztcclxuICAgIHN0YXRpYyByZWFkb25seSBFTlRFUiA9IDEzO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IERPVCA9IDE5MDtcclxuICAgIHN0YXRpYyByZWFkb25seSBDT01NQSA9IDE4ODtcclxuICAgIHN0YXRpYyByZWFkb25seSBERUNJTUFMX1BPSU5UID0gMTEwO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNTcGVjaWFsS2V5KGV2ZW50KTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWY6IGJhY2tzcGFjZSAsZGVsZXRlLCB0YWIsIGVzY2FwZSwgZW50ZXIsIC4gYW5kICxcclxuICAgICAgICBpZiAoQXJyYXlVdGlsLmluQXJyYXkoW3RoaXMuQkFDS1NQQUNFLCB0aGlzLkRFTEVURSwgdGhpcy5UQUIsIHRoaXMuRVNDQVBFLCB0aGlzLkVOVEVSLCB0aGlzLkRFQ0lNQUxfUE9JTlQsIHRoaXMuRE9ULCB0aGlzLkNPTU1BXSwgZXZlbnQua2V5Q29kZSlcclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWY6IEN0cmwvY21kK0FcclxuICAgICAgICAgICAgfHwgKGV2ZW50LmtleUNvZGUgPT09IHRoaXMuQSAmJiAoZXZlbnQuY3RybEtleSA9PT0gdHJ1ZSB8fCBldmVudC5tZXRhS2V5ID09PSB0cnVlKSlcclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWY6IEN0cmwvY21kK0NcclxuICAgICAgICAgICAgfHwgKGV2ZW50LmtleUNvZGUgPT09IHRoaXMuQyAmJiAoZXZlbnQuY3RybEtleSA9PT0gdHJ1ZSB8fCBldmVudC5tZXRhS2V5ID09PSB0cnVlKSlcclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWY6IEN0cmwvY21kK1hcclxuICAgICAgICAgICAgfHwgKGV2ZW50LmtleUNvZGUgPT09IHRoaXMuWCAmJiAoZXZlbnQuY3RybEtleSA9PT0gdHJ1ZSB8fCBldmVudC5tZXRhS2V5ID09PSB0cnVlKSlcclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWY6IGhvbWUsIGVuZCwgbGVmdCwgcmlnaHRcclxuICAgICAgICAgICAgfHwgKGV2ZW50LmtleUNvZGUgPj0gdGhpcy5CRUdJTl9IT01FX0VORF9MRUZUX1JJR0hUICYmIGV2ZW50LmtleUNvZGUgPD0gdGhpcy5FTkRfSE9NRV9FTkRfTEVGVF9SSUdIVCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzTnVtYmVyS2V5KGV2ZW50KTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWY6IG5vdCBhIG51bWJlclxyXG4gICAgICAgIGlmICgoZXZlbnQuc2hpZnRLZXkgfHwgKGV2ZW50LmtleUNvZGUgPCA0OCB8fCBldmVudC5rZXlDb2RlID4gNTcpKSAmJiAoZXZlbnQua2V5Q29kZSA8IDk2IHx8IGV2ZW50LmtleUNvZGUgPiAxMDUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG5cclxuIl19
